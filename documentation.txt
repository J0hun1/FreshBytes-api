Django setup:
    django-admin startproject <project-name>

    if in any case it fails try:
        python -m django startproject <name>


to create new django app within directory:
    python manage.py startapp <name>
        1. then add the "<name>" into the settings .py in <project-name> directory
        2. also add DRF with "rest_framework"

migrations:
    1. python manage.py makemigrations
    2. python manage.py migrate

creating new admin:
    1. python manage.py createsuperuser

to run/test python api:
    python manage.py runserver

to create a graph model of present tables:
    ./manage.py graph_models api > <file>

notes:
    apps - ways to separate different logics (the api directory in this project's case)
    models - where we define different db models (models.py)
    serializers - takes models and converts it into json compatible data (serializers.py)
    view - utilizes model and serializers
    object relational mapping - maps a python object to a database instance
    generics - contains generic views used to update/delete etc. any model
    urls - defining a root or url to access the view
    migrations - using the django ORM to automatically create correct sql tables in the database



TODOS:
1. Design the Missing Models
    A. Payment Model
        Purpose: Track all payment transactions for orders.
        Fields: payment_id, order (FK), method, status, amount, transaction_id, payment_date, etc.
        Best Practice: Use enums for status/method, store gateway responses, and link to orders.

        1. Order status update endpoints (for seller and system). ✅
        2. Notification system (email, dashboard, etc.).
        3. Shipping/tracking integration (optional).
        4. Review/feedback system (optional).
        5. Seller earnings and payout logic (optional).

    B. Inventory Model
        Purpose: Track stock for each product, prevent overselling.
        Fields: product (OneToOne), current_stock, reserved_stock, available_stock, low_stock_threshold, last_restocked.
        Best Practice: Use atomic updates for stock changes, and log all movements.
    C. Shipping/Address Models
        Purpose: Store user addresses and shipping details for orders.
        Fields: user (FK), address fields, is_default, etc.
        Best Practice: Allow multiple addresses per user, and link shipping to orders.
    D. Notification Model
        Purpose: Notify users of order status, low stock, etc.
        Fields: user (FK), type, title, message, is_read, created_at.
        Best Practice: Use a service layer to trigger notifications on key events.

2. Implement Business Logic Services
    Create a services/ module for each domain:
    payment_services.py (handle payment processing, refunds)
    inventory_services.py (stock reservation, release, audit)
    order_services.py (order creation, status transitions, total calculation)
    shipping_services.py (cost calculation, address validation)
    notification_services.py (send notifications on events)
    Use Django transactions for all workflows that touch multiple models (e.g., order creation, payment, inventory).

3. Add Validation and State Machines
    Order Status:
        Implement a state machine for order status transitions (e.g., PENDING → CONFIRMED → SHIPPED → DELIVERED).
    Promo Validation:
        Ensure discounts are valid (e.g., percentage ≤ 100, fixed > 0, end date > start date).
    Cart/Inventory:
        Validate stock before adding to cart or confirming order.

4. Integrate With Views/Serializers
    Serializers:
        Add validation logic in DRF serializers for all new models.
    Views:
        Use service functions in your API views to encapsulate business logic (not in the view directly).

